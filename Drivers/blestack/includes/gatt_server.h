/******************** (C) COPYRIGHT 2012 STMicroelectronics ********************
* File Name          : gatt_server.h
* Author             : AMS - HEA&RF BU
* Version            : V1.0.0
* Date               : 19-July-2012
* Description        : Header file for GATT server layer.
********************************************************************************
* THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
* WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
* AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
* INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
* CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
* INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
*******************************************************************************/

#ifndef __GATT_SERVER_H__
#define __GATT_SERVER_H__

#include "compiler.h"
#include "ble_status.h"

/**
 * UUID table
 */
#define PRIMARY_SERVICE_UUID                       (0x2800)
#define SECONDARY_SERVICE_UUID                     (0x2801)
#define INCLUDE_SERVICE_UUID                       (0x2802)
#define CHARACTERISTIC_UUID                        (0x2803)
#define CHAR_EXTENDED_PROP_DESC_UUID               (0x2900)
#define CHAR_USER_DESC_UUID                        (0x2901)
#define CHAR_CLIENT_CONFIG_DESC_UUID               (0x2902)
#define CHAR_SERVER_CONFIG_DESC_UUID               (0x2903)
#define CHAR_FORMAT_DESC_UUID                      (0x2904)
#define CHAR_AGGR_FMT_DESC_UUID                    (0x2905)
#define GATT_SERVICE_UUID                          (0x1801)
#define GAP_SERVICE_UUID                           (0x1800)
#define SERVICE_CHANGED_UUID                       (0x2A05)

/******************************************************************************
 * Types
 *****************************************************************************/

/** 
 * Access permissions 
 * for an attribute
 */
typedef tHalUint8 tAttrAccessFlags;
#define ATTR_NO_ACCESS                             (0x00)
#define ATTR_ACCESS_READ_ONLY                      (0x01) 
#define ATTR_ACCESS_WRITE_REQ_ONLY                 (0x02)
#define ATTR_ACCESS_READ_WRITE                     (0x03)
#define ATTR_ACCESS_WRITE_WITHOUT_RESPONSE         (0x04)
#define ATTR_ACCESS_SIGNED_WRITE_ALLOWED           (0x08)

/**
 * Allows all write procedures
 */
#define ATTR_ACCESS_WRITE_ANY                      (0x0E)

/**
 * Characteristic properties.
 */
#define CHAR_PROP_BROADCAST 					(0x01)
#define CHAR_PROP_READ							(0x02)
#define CHAR_PROP_WRITE_WITHOUT_RESP			(0x04)
#define CHAR_PROP_WRITE			                (0x08)
#define CHAR_PROP_NOTIFY			            (0x10)
#define CHAR_PROP_INDICATE			            (0x20)
#define CHAR_PROP_SIGNED_WRITE                  (0x40)
#define CHAR_PROP_EXT           	            (0x80)

/** 
 * Security permissions
 * for an attribute
 */
typedef tHalUint8 tAttrSecurityFlags;
#define ATTR_PERMISSION_NONE                       (0x00)
#define ATTR_PERMISSION_AUTHEN_READ                (0x01)
#define ATTR_PERMISSION_AUTHOR_READ                (0x02)
#define ATTR_PERMISSION_ENCRY_READ                 (0x04)
#define ATTR_PERMISSION_AUTHEN_WRITE               (0x08)
#define ATTR_PERMISSION_AUTHOR_WRITE               (0x10)
#define ATTR_PERMISSION_ENCRY_WRITE                (0x20)

/** 
 * Type of UUID 
 * (16 bit or 128 bit)
 */
typedef tHalUint8 tUuidType;
#define UUID_TYPE_16                               (0x01)
#define UUID_TYPE_128                              (0x02)

/**
 * Type of service
 * (primary or secondary)
 */
typedef tHalUint8 tServiceType;
#define PRIMARY_SERVICE                            (0x01)
#define SECONDARY_SERVICE                          (0x02)

/** 
 * Type of event generated by 
 * Gatt server
 */
typedef tHalUint8 tGattServerEvent;
#define GATT_SERVER_ATTR_WRITE                     (0x01)
#define GATT_SERVER_ATTR_READ                      (0x02)
#define GATT_INTIMATE_AND_WAIT_FOR_APPL_AUTH       (0x04)
#define GATT_SERVER_ATTR_READ_WRITE                GATT_SERVER_ATTR_WRITE|GATT_SERVER_ATTR_READ


/**
 * Min encryption key size
 */
#define MIN_ENCRY_KEY_SIZE                (7)

/**
 * Max encryption key size
 */
#define MAX_ENCRY_KEY_SIZE                (0x10)


/** 
 * Uuid value(16 or 128 bit)
 */
typedef union  _tUuidValue
{
    tHalUint16 uuid16;
    tHalUint8  uuid128[16];
}tUuidValue;

typedef __packed struct _charactFormat {
    tHalUint8 format;
    tHalUint8 exp;
    tHalUint16 unit;
    tHalUint8 name_space;
    tHalUint16 desc;
} PACKED charactFormat;

/*
 * Default MTU size
 */
#define ATT_DEFAULT_MTU       (23)

/******************************************************************************
 * Global Functions
 *****************************************************************************/

/** @defgroup GATT_server_func GATT server functions
 * @{
 */

/**
 * Gatt_Server_Init
 *
 * This function initializes the
 * GATT Server
 *
 * @return BLE_STATUS_SUCCESS,BLE_STATUS_ERROR
 */

tBleStatus Gatt_Server_Init(void);

/**
 * This function adds a service declaration
 * and reserves MaxRecords of attributes to 
 * it and passes back the handle
 *
 * @param[out] serviceAttrHandle Handle for the service declaration
 * @param[in]  serviceUuid       Uuid for the service
 * @param[in]  serviceUuidType   Uuid Type(16 or 128 bit)
 * @param[in]  maxAttrRecords    Number of attributes service requires
 * @param[in]  serviceType       Type of service (primary or secondary)
 * @param[in]  startHandle       Free handle from which the service should be allocated
 *
 * @return BLE_STATUS_SUCCESS,BLE_STATUS_INVALID_PARAMETER,
 *         BLE_STATUS_OUT_OF_MEMORY,BLE_STATUS_INSUFFICIENT_RESOURCES
 */

tBleStatus Gatt_Add_Service(tHalUint16* serviceAttrHandle, 
                            tUuidValue serviceUuid, 
                            tHalUint16 maxAttrRecords,
                            tUuidType serviceUuidType, 
                            tServiceType serviceType,
                            tHalUint16 startHandle);

/**
 * This function adds an include declaration inside 
 * a service definition and passes back the handle
 * of the same.
 *
 * @param[out] includeAttrHandle  Handle of the include declaration
 * @param[in]  serviceHandle      Handle of the service that includes service 
 * @param[in]  includeStartHandle Start Handle of included service
 * @param[in]  includeEndHandle   End Handle of the included service
 * @param[in]  includeUuid        Uuid of the Included Service
 * @param[in]  includeUuidType    Included service Uuid type(16 or 128 bit)
 *
 * @return BLE_STATUS_SUCCESS,BLE_STATUS_INVALID_PARAMETER,
 *         BLE_STATUS_OUT_OF_MEMORY,BLE_STATUS_INVALID_HANDLE,
 *         BLE_STATUS_INSUFFICIENT_RESOURCES,BLE_STATUS_INVALID_OPERATION
 */

tBleStatus Gatt_Include_Service(tHalUint16* includeAttrHandle, 
                                tHalUint16 serviceHandle, 
                                tHalUint16 includeStartHandle, 
                                tHalUint16 includeEndHandle, 
                                tUuidValue includeUuid,
                                tUuidType includeUuidType);

/**
 * This function adds characteristic declaration 
 * and value declaration to a service and passes 
 * back the handle of the characteristic declaration
 *
 * @param[out] charAttrHandle Characteristic declaration handle
 * @param[in]  serviceHandle  Handle of the service,characteristic to be added 
 * @param[in]  charUuid       Uuid for the characterisitic
 * @param[in]  charValueLen   maximum value Length of the characteristic value 
 * @param[in]  charUuidType   Uuid type(16 or 128 bit)
 * @param[in]  charProperties properties associated with characteristic value
 * @param[in]  secPermissions security permissions of characteristic value
 * @param[in]  gattEvtMask    event generated on Read/Write
 * @param[in]  encryKeySize   Encryption key size for value attribute
 * @param[in]  isVariable     is the value of characteristic fixed or variable
 *
 *
 * @return  BLE_STATUS_SUCCESS,BLE_STATUS_INVALID_PARAMETER,
 *          BLE_STATUS_OUT_OF_MEMORY,BLE_STATUS_INVALID_HANDLE,
 *          BLE_STATUS_INSUFFICIENT_RESOURCES
 */

tBleStatus Gatt_Add_Characteristic(tHalUint16* charAttrHandle,
                                   tHalUint16 serviceHandle, 
                                   tUuidValue charUuid, 
                                   tHalUint16 charValueLen, 
                                   tUuidType charUuidType, 
                                   tHalUint8 charProperties, 
                                   tAttrSecurityFlags secPermissions,
                                   tGattServerEvent gattEvtMask,
                                   tHalUint8 encryKeySize,
                                   tHalBool isVariable);


/**
 * This function adds characteristic descriptor of type
 * specified to a characteristic 
 *
 * @param[out] descHandle     Handle of the characteristic descriptor
 * @param[in]  servHandle     Handle of the service
 * @param[in]  charHandle     Handle of the characteristic
 * @param[in]  descUuid       UUID of descriptor
 * @param[in]  descValueLen   Length of the descriptor value
 * @param[in]  maxValLen      Max Length of the descriptor value
 * @param[in]  descUuidType   UUID(16 or 128)Type of characteristic descriptor
 * @param[in]  descValue      value of the descriptor
 * @param[in]  secPermission  security permisions for descriptor
 * @param[in]  accPermission  access permissions for descriptor
 * @param[in]  gattEvtMask    event generated on Read/Write
 * @param[in]  encryKeySize   Encryption key size for descriptor
 * @param[in]  isVariable     is the value of descriptor fixed or variable
 *
 * @return BLE_STATUS_SUCCESS,BLE_STATUS_INVALID_PARAMETER,
 *         BLE_STATUS_OUT_OF_MEMORY,BLE_STATUS_INVALID_HANDLE,
 *         BLE_STATUS_INSUFFICIENT_RESOURCES,BLE_STATUS_INVALID_OPERATION
 */

tBleStatus Gatt_Add_Charac_Desc(tHalUint16* descHandle,
                                tHalUint16 servHandle, 
                                tHalUint16 charHandle, 
                                tUuidValue descUuid, 
                                tHalUint16 descValueLen,
                                tHalUint16 maxValLen,
                                tUuidType descUuidType,  
                                tHalUint8* descValue, 
                                tAttrSecurityFlags secPermission, 
                                tAttrAccessFlags accPermission,
                                tGattServerEvent gattEvtMask,
                                tHalUint8 encryKeySize,
                                tHalBool isVariable);

/**
 * This function updates the characteristic value of a
 * a characteristic.
 *
 * @param[in] servHandle Handle of the service
 * @param[in] charHandle Handle of the characteristic
 * @param[in] charValueLen Length of the descriptor value
 * @param[in] charValue value of the characterisitic
 *
 * @return BLE_STATUS_SUCCESS,BLE_STATUS_INVALID_HANDLE 
 *         BLE_STATUS_ERROR, BLE_STATUS_INVALID_PARAMETER,
 *         BLE_STATUS_INSUFFICIENT_RESOURCES
 */

tBleStatus Gatt_Update_Charac_Value(tHalUint16 servHandle, 
                                    tHalUint16 charHandle,
                                    tHalUint16 charValueLen,   
                                    tHalUint8 *charValue);                                     

/**
 * This function characteristic value for the specified
 * Uuid
 *
 * @param[in]  servHandle  service handle to be searched
 * @param[in]  uuid        Uuid of characteristic to be searched
 * @param[in]  uuidType    Uuid type of the characteristic
 * @param[out] buf         value of the characteristic
 *
 * returns BLE_STATUS_SUCCESS if the characteristic is found
 *         else BLE_STATUS_FAILED is returned
 */
tBleStatus Gatt_Read_Characteristic_Val(tHalUint16 servHandle,
                                        tUuidValue uuid,
                                        tUuidType uuidType,
                                        tHalUint8 *buf);


/**
 * This function deletes the characteristic Definition which
 * includes removal of declartions and descriptors.
 *
 * @param[in] servHandle Handle of the service
 * @param[in] charHandle Handle of the characteristic to be deleted
 *
 * @return BLE_STATUS_SUCCESS,BLE_STATUS_INVALID_HANDLE,
 *         BLE_STATUS_INSUFFICIENT_RESOURCES
 */

tBleStatus Gatt_Delete_Characteristic(tHalUint16 servHandle,
                                      tHalUint16 charHandle);


/**
 * This function deletes the service and the associated
 * include services and characteristics
 *
 * @param[in] servHandle Handle of the characteristic
 *
 * @return BLE_STATUS_SUCCESS,BLE_STATUS_INVALID_HANDLE 
 *         BLE_STATUS_ERROR,BLE_STATUS_INSUFFICIENT_RESOURCES
 */
 
tBleStatus Gatt_Delete_Service(tHalUint16 servHandle);

/**
 * This function removes an include declaration from
 * a service
 *
 * @param[in] servHandle    Handle of the service
 * @param[in] includeHandle Handle of the include declaration
 *
 * @return BLE_STATUS_SUCCESS,BLE_STATUS_INVALID_HANDLE 
 */

tBleStatus Gatt_Delete_Include_Service(tHalUint16 servHandle, 
                                       tHalUint16 includeHandle);

/**
 * This function removes can be used to set the value of a 
 * characteristic descriptor
 *
 * @param[in] servHandle    Handle of the service
 * @param[in] charHandle    Handle of the characteristic
 * @param[in] descHandle    Handle of the Descriptor
 * @param[in] descVal       Value of descriptor
 * @param[in] descValLen    Value length of descriptor
 *
 * @return BLE_STATUS_SUCCESS,BLE_STATUS_INVALID_HANDLE,
 *         BLE_STATUS_ERROR,BLE_STATUS_INVALID_PARAMETER
 */

tBleStatus Gatt_Set_Desc_Value(tHalUint16 servHandle, 
                               tHalUint16 charHandle,
                               tHalUint16 descHandle,
                               tHalUint8* descVal,
                               tHalUint16 descValLen);


/**
 * This function searches for attribute and returns its value part 
 *
 * @param[in]  attrHandle  attribute handle to be searched
 * @param[in]  dataLen     Length of the value part   
 * @param[in]  data        value of the attribute
 *
 * return BLE_STATUS_SUCCESS Handle found
 *        BLE_STATUS_FAILED  Handle not found 
 */

tBleStatus Gatt_Read_Handle_Val(tHalUint16 attrHandle,
                                tHalUint16* dataLen,
                                tHalUint8** data);

/**
 * @}
 */

/**
 * This is the main function that processes all GATT queues
 */
void Gatt_Process_Q(void);

/**
 * Callback that is called when there
 * is a request for reading or writing an attribute.
 * Possible events: @ref EVT_GATT_ATTRIBUTE_MODIFIED, @ref EVT_GATT_WRITE_PERMIT_REQ,
 * @ref EVT_GATT_ATTRIBUTE_READ_REQ.
 *
 * @param[in] attrHandle   Handle of the attribute
 * @param[in] pAttrValueBuff   Pointer to the attribute buffer
 * @param[in] attrValLen   Attribute length
 *
 */
void GATT_Server_CB(tHalUint16 evt,tHalUint16 handle,tHalUint8 dataLen,tHalUint8 *data);


/**
 * Callback that is called when there
 * is a request for reading an attribute.
 *
 * @param[in] attrHandle   Handle of the attribute
 * @param[in] pAttrValueBuff   Pointer to the attribute buffer
 * @param[in] attrValLen   Attribute length
 *
 */
void GATT_Read_Request_CB(tHalUint16 attrHandle, tHalUint8 * pAttrValueBuff, tHalUint8 attrValLen);

/**
 * Callback that is called when there
 * is a request for writing an attribute.
 *
 * @param[in] attrHandle   Handle of the attribute
 * @param[in] pAttrValueBuff   Pointer to the attribute buffer
 * @param[in] attrValLen   Attribute length
 */
void GATT_Write_Request_CB(tHalUint16 attrHandle, tHalUint8 * pAttrValueBuff, tHalUint8 attrValLen);

/**
* This function must called when after an EVT_BLUE_GATT_WRITE_PERMIT_REQ
* The attribute value will be written to when the status is 0. In other cases, the write is rejected.
* If there is a pending write request, the write response will be sent based on the status and error code
*
* @param[in]  handle         attribute handle for which we have got a write request
* @param[in]  status         0 application accepted the write request, else application rejected the write request
* @param[in]  errCode        error code to be passed in case of the write rejected
* @param[in]  attrValLen     Length of the attribute value to be written
* @param[in]  attrVal        status(1byte),error code(1byte),value of the attribute(attrValLen bytes)
* 
*
*/
tBleStatus Gatt_Appl_Auth_For_Write(tHalUint16 handle,
                                    tHalUint8 status,
                                    tHalUint8 errCode,
                                    tHalUint16 attrValLen,
                                    tHalUint8* attrVal
                                    );


#endif /* __GATT_SERVER_H__ */
